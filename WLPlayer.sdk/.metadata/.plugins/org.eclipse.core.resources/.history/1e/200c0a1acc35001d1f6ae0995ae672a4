#include "gpio.h"

XGpioPs Gpio;
XGpioPs_Config* Gpio_Config;

u8 Button_Status[5]; //will be set to indicate which button is triggered
					 //sequence: MID LEFT RIGHT UP DOWN
u8 Music_Now_Number;

void GPIOInitialize()
{
	Gpio_Config = XGpioPs_LookupConfig(GPIOPS_DEV_ID);
	XGpioPs_CfgInitialize(&Gpio,Gpio_Config,Gpio_Config->BaseAddr);

	XGpioPs_SetDirectionPin(&Gpio,BUTTON_UP,0);
	XGpioPs_SetDirectionPin(&Gpio,BUTTON_DOWN,0);
	XGpioPs_SetDirectionPin(&Gpio,BUTTON_LEFT,0);
	XGpioPs_SetDirectionPin(&Gpio,BUTTON_RIGHT,0);
	XGpioPs_SetDirectionPin(&Gpio,BUTTON_MID,0);
	XGpioPs_SetDirectionPin(&Gpio,SWITCH_1,0);
	XGpioPs_SetDirectionPin(&Gpio,SWITCH_2,0);
	XGpioPs_SetDirectionPin(&Gpio,SWITCH_3,0);
	XGpioPs_SetDirectionPin(&Gpio,LED_1,1);
	XGpioPs_SetDirectionPin(&Gpio,LED_2,1);

	XGpioPs_SetOutputEnablePin(&Gpio,LED_1,1);
	XGpioPs_SetOutputEnablePin(&Gpio,LED_2,1);

	GPIOInterruptInit();

	for(int i = 0;i<5;i++)
	{
		Button_Status[i] = 0;
	}

	Music_Now_Number = 0;
}

void GPIOInterruptHandler(void* callback)
{
	XGpioPs* gpio = (XGpioPs*) callback;
	if(XGpioPs_IntrGetStatusPin(gpio,BUTTON_MID))
	{
		XGpioPs_IntrClearPin(gpio, BUTTON_MID);
		Button_Status[0] = 1;
	}
	if(XGpioPs_IntrGetStatusPin(gpio,BUTTON_LEFT))
	{
		XGpioPs_IntrClearPin(gpio, BUTTON_LEFT);
		Button_Status[1] = 1;
	}
	if(XGpioPs_IntrGetStatusPin(gpio,BUTTON_RIGHT))
	{
		XGpioPs_IntrClearPin(gpio, BUTTON_RIGHT);
		Button_Status[2] = 1;
	}
	if(XGpioPs_IntrGetStatusPin(gpio,BUTTON_UP))
	{
		XGpioPs_IntrClearPin(gpio, BUTTON_UP);
		Button_Status[3] = 1;
	}
	if(XGpioPs_IntrGetStatusPin(gpio,BUTTON_DOWN))
	{
		XGpioPs_IntrClearPin(gpio, BUTTON_DOWN);
		Button_Status[4] = 1;
	}
}

void GPIOInterruptInit()
{
	XScuGic_Connect(&Intc,GPIO_INTR_ID,(Xil_ExceptionHandler)GPIOInterruptHandler,(void*)&Gpio);
	//enable the intr from the gpio
	XScuGic_Enable(&Intc,GPIO_INTR_ID);

	//set the intr trigger type
	XGpioPs_SetIntrTypePin(&Gpio, BUTTON_MID, XGPIOPS_IRQ_TYPE_EDGE_FALLING);
	XGpioPs_SetIntrTypePin(&Gpio, BUTTON_LEFT, XGPIOPS_IRQ_TYPE_EDGE_FALLING);
	XGpioPs_SetIntrTypePin(&Gpio, BUTTON_RIGHT, XGPIOPS_IRQ_TYPE_EDGE_FALLING);
	XGpioPs_SetIntrTypePin(&Gpio, BUTTON_UP, XGPIOPS_IRQ_TYPE_EDGE_FALLING);
	XGpioPs_SetIntrTypePin(&Gpio, BUTTON_DOWN, XGPIOPS_IRQ_TYPE_EDGE_FALLING);

	//enable the interrupt
	XGpioPs_IntrEnablePin(&Gpio,BUTTON_MID);
	XGpioPs_IntrEnablePin(&Gpio,BUTTON_LEFT);
	XGpioPs_IntrEnablePin(&Gpio,BUTTON_RIGHT);
	XGpioPs_IntrEnablePin(&Gpio,BUTTON_UP);
	XGpioPs_IntrEnablePin(&Gpio,BUTTON_DOWN);
}

void CheckButtonInterrupt()
{
	if(Button_Status[0])
	{
		Button_Status[0] = 0;
		ControlStopStart();
	}
	if(Button_Status[1])
	{
		Button_Status[1] = 0;
		ControlLastMusic();
	}
	if(Button_Status[2])
	{
		Button_Status[2] = 0;
		ControlNextMusic();
	}
	if(Button_Status[3])
	{
		Button_Status[3] = 0;
		ControlVolumeUp();
	}
	if(Button_Status[4])
	{
		Button_Status[4] = 0;
		ControlVolumeDown();
	}
}

void ControlStopStart()
{
	if(!Music_Play_Now) return;
	if(Music_Play_Now->is_playing) StopMusic();
	else ContinueMusic();
	printf("stop/start \n");
}

void ControlNextMusic()
{
	Music_Now_Number += 1;
	if(Music_Now_Number >= Music_File_Count) Music_Now_Number = 0;
	SwitchMusic(Music_Now_Number);
	printf("next \n");
}

void ControlLastMusic()
{
	if(Music_Now_Number == 0) Music_Now_Number = Music_File_Count -1;
	printf("last \n");
}

void ControlVolumeUp()
{
	printf("volume up \n");
	//update the audio, must update the audio first
	VolumeUp();
	//the update of the video will be finished in transaction loop
}

void ControlVolumeDown()
{
	printf("volume down \n");
	VolumeDown();
}
