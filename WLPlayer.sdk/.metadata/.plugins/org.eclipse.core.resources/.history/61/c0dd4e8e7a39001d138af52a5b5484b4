#include "video.h"

//define of color
pixel Color_Red = {0xFF,0x00,0x00};
pixel Color_Green = {0x00,0xFF,0x00};
pixel Color_Blue = {0x00,0x00,0xFF};
pixel Color_Orange = {0xFF,0x7F,0x00};
pixel Color_Yellow = {0xFF,0xFF,0x00};
pixel Color_Cyan = {0x00,0xFF,0xFF};
pixel Color_Purple = {0x8B,0x00,0xFF};
pixel Color_Black = {0x00,0x00,0x00};
pixel Color_White = {0xFF,0xFF,0xFF};

XAxiVdma Video_Vdma;
XAxiVdma_Config* Video_Vdma_Config;
XAxiVdma_DmaSetup Video_Vdma_Read_Cfg;

pixel* Screen;
queue_header Wave_Queue; //the current wave picture queue pointer
pixel Wave_Color;

u16 FFT_Data[BYTES_PER_FIFO_NODE * FIFO_NODE_NUMBER];

//character
u8 Character_V[CHARACTER_WIDTH*CHARACTER_HEIGHT] = {
	1,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,1,
	0,1,0,0,0,0,0,0,1,0,
	0,1,0,0,0,0,0,0,1,0,
	0,1,0,0,0,0,0,0,1,0,
	0,1,0,0,0,0,0,0,1,0,
	0,0,1,0,0,0,0,1,0,0,
	0,0,1,0,0,0,0,1,0,0,
	0,0,1,0,0,0,0,1,0,0,
	0,0,1,0,0,0,0,1,0,0,
	0,0,0,1,0,0,1,0,0,0,
	0,0,0,1,0,0,1,0,0,0,
	0,0,0,1,0,0,1,0,0,0,
	0,0,0,0,1,1,0,0,0,0,
	0,0,0,0,1,1,0,0,0,0
};

void VideoInitialize()
{
	int status;
	Screen = (pixel*)VIDEO_BUFFER_BASE;
	Video_Vdma_Config = XAxiVdma_LookupConfig(VIDEO_VDMA_DEV_ID);
	status = XAxiVdma_CfgInitialize(&Video_Vdma,Video_Vdma_Config,Video_Vdma_Config->BaseAddress);
	if(status != XST_SUCCESS)
	{
		printf("configuration vdma initialization failed %d \n",status);
	}

	Video_Vdma_Read_Cfg.VertSizeInput = VIDEO_HEIGHT;
	Video_Vdma_Read_Cfg.HoriSizeInput = VIDEO_WIDTH * (Video_Vdma_Config->Mm2SStreamWidth>>3);
	Video_Vdma_Read_Cfg.Stride = VIDEO_WIDTH * (Video_Vdma_Config->Mm2SStreamWidth>>3);
	Video_Vdma_Read_Cfg.FrameDelay = 0;
	Video_Vdma_Read_Cfg.EnableCircularBuf = 1;
	Video_Vdma_Read_Cfg.EnableSync = 1;
	Video_Vdma_Read_Cfg.PointNum = 0;
	Video_Vdma_Read_Cfg.EnableFrameCounter = 0;
	Video_Vdma_Read_Cfg.FixedFrameStoreAddr = 0;
	XAxiVdma_DmaConfig(&Video_Vdma,XAXIVDMA_READ,&Video_Vdma_Read_Cfg);

	u32 addr =  VIDEO_BUFFER_BASE;
	for(int i = 0;i<Video_Vdma.MaxNumFrames;i++)
	{
		Video_Vdma_Read_Cfg.FrameStoreStartAddr[i] = addr;
		addr += VIDEO_WIDTH * VIDEO_HEIGHT;
	}
	status = XAxiVdma_DmaSetBufferAddr(&Video_Vdma,XAXIVDMA_READ,Video_Vdma_Read_Cfg.FrameStoreStartAddr);
	if(status != XST_SUCCESS)
	{
		printf("read channel set buffer address failed! error = %d \n",status);
	}
	XAxiVdma_IntrEnable(&Video_Vdma,XAXIVDMA_IXR_ERROR_MASK,XAXIVDMA_READ);
	XAxiVdma_IntrEnable(&Video_Vdma,XAXIVDMA_IXR_ERROR_MASK,XAXIVDMA_WRITE);
	status = XAxiVdma_DmaStart(&Video_Vdma,XAXIVDMA_READ);
	if(status != XST_SUCCESS)
	{
		printf("start vdma read transfer failed %d \n",status);
	}
	Wave_Color = Color_Cyan;
	Wave_Queue = CreateQueue(FIFO_NODE_NUMBER);
	return;
}

void ColorBarTest()
{
	u8* vdma_ptr = (u8*)VIDEO_BUFFER_BASE;
	//write the ddr
	for(int i = 0;i<VIDEO_HEIGHT;i++)
	{
		for(int j = 0;j<VIDEO_WIDTH;j++)
		{
			if(i<VIDEO_HEIGHT/3)
			{
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0xff;
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0x00;
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0x00;
			}else if(i>VIDEO_HEIGHT*2/3)
			{
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0x00;
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0xff;
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0x00;
			}else
			{
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0x00;
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0x00;
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0xff;
			}
		}
	}

	Xil_DCacheFlush();
}

pixel* GetPixel(int x,int y)
{
	if(x>=VIDEO_WIDTH || x<0 || y>=VIDEO_HEIGHT || y<0)
	{
		return NULL;
	}
	return &Screen[x + y*VIDEO_WIDTH];
}

void PaintRectangular(int x,int y,int width,int height,color c)
{
	//check the range
	if(x<0) x = 0;
	if(y<0) y = 0;
	if(x+width >= VIDEO_WIDTH) width = VIDEO_WIDTH - x - 1;
	if(y+height >= VIDEO_HEIGHT) height = VIDEO_HEIGHT - y - 1;

	for(int i = 0;i<width;i++)
	{
		for(int j = 0;j<height;j++)
		{
			*(GetPixel(x+i,y+j)) = *c;
		}
	}
	return;
}

queue_header CreateQueue(int n)
{
	queue_header head = (queue_header)malloc(sizeof(queue_node));
	head->next = NULL;
	queue_header p = head;
	if(n<=1)
	{
		p->next = head;
		return head;
	}
	for(int i = 0;i<n-1;i++)
	{
		p->next = (queue_header)malloc(sizeof(queue_node));
		p = p->next;
	}
	p->next = head;
	return head;
}

void DestroyQueue(queue_header qh,int n)
{
	queue_header p;
	queue_header np;
	p = qh->next;
	if(n<=1)
	{
		free(qh);
		return;
	}
	for(int i = 0;i<n-1;i++)
	{
		np = p->next;
		free(p);
		p = np;
	}
	free(qh);
	return;
}

void DrawWave(int y,color c)
{
	int x = 0;
	int node_p = 0;
	int value_y;
	int last_y = y;
	queue_header q = Wave_Queue;
	int h,pos_y;
	while(x<1024)
	{
		value_y = q->data[node_p++] ;
		//calculate the position y and height
		if(value_y>last_y)
		{
			//up
			h = value_y-last_y;
			pos_y = y-value_y;

		}else if(value_y<last_y)
		{
			//down
			h = last_y-value_y;
			pos_y = y-(last_y-1);

		}else
		{
			//equal
			h = 1;
			pos_y = y-value_y;
		}
		last_y = value_y;
		PaintRectangular(x++,pos_y,1,h,c);

		//switch to next queue node if necessary
		if(node_p>=AUDIO_BYTES_PER_PERIOD/4/2)
		{
			q = q->next;
			node_p = 0;
		}
	}
}

void UpdateWave()
{
	DrawWave(300,&Color_Black);
	queue_header temp_q = Wave_Queue;
	Wave_Queue = Wave_Queue->next;
	ConvertAudioToVideo(GetNowMusicBufferPointer(),
			temp_q->data,AUDIO_BYTES_PER_PERIOD/4/2);
	DrawWave(300,&Color_Cyan);
}

void DrawVolumeBar(int x,int y,color c)
{
	if(x<0 || (x+VIDEO_VOLUME_BAR_WIDTH*16+15+CHARACTER_WIDTH+1)>1023 || y<0 || y+VIDEO_VOLUME_BAR_HEIGHT>599)
		return;
	int count = (Audio_Volume+1)/4;
	if(count<0 || count>16) return;
	//draw the 'V' first
	int pos_x = x;
	DrawCharacter(pos_x,y,Character_V);
	pos_x += CHARACTER_WIDTH+1;
	//draw the bar
	for(int i = 0;i<count;i++)
	{
		PaintRectangular(pos_x,y,VIDEO_VOLUME_BAR_WIDTH,VIDEO_VOLUME_BAR_HEIGHT,c);
		pos_x += VIDEO_VOLUME_BAR_WIDTH+1;
	}
	for(int i = 0;i<16-count;i++)
	{
		PaintRectangular(pos_x,y,VIDEO_VOLUME_BAR_WIDTH,VIDEO_VOLUME_BAR_HEIGHT,&Color_Black);
		pos_x += VIDEO_VOLUME_BAR_WIDTH+1;
	}
}

void DrawCharacter(int x,int y,u8* character)
{
	if(x<0 || x+CHARACTER_WIDTH>1023 || y<0 || y+CHARACTER_HEIGHT>599) return;

	for(int i = 0;i<CHARACTER_HEIGHT;i++)
	{
		for(int j = 0;j<CHARACTER_WIDTH;j++)
		{
			if(character[i*CHARACTER_WIDTH+j]==1)
				Screen[(i+y)*VIDEO_WIDTH + x+j] = Color_White;
			else
				Screen[(i+y)*VIDEO_WIDTH + x+j] = Color_Black;
		}
	}
}

void DrawMusicBar(int pos_x,int pos_y,int music_number)
{
	int x = pos_x;
	for(int i = 0;i<Music_File_Count;i++)
	{
		if(i==music_number)
			PaintRectangular(x,pos_y,VIDEO_VOLUME_BAR_WIDTH,VIDEO_VOLUME_BAR_HEIGHT,&Color_Red);
		else
			PaintRectangular(x,pos_y,VIDEO_VOLUME_BAR_WIDTH,VIDEO_VOLUME_BAR_HEIGHT,&Color_Cyan);
		x += VIDEO_VOLUME_BAR_WIDTH + 1;
		if(x>=1024) break;
	}
}

Xint16 GetMusicWaveData(int number)
{
	if(number<0 || number > BYTES_PER_FIFO_NODE*FIFO_NODE_NUMBER)
		return 0;

	int n,c;
	n = number/BYTES_PER_FIFO_NODE;
	c = number%BYTES_PER_FIFO_NODE;
	queue_node* qp = Wave_Queue;
	for(int i = 0;i<n;i++)
	{
		qp = qp->next;
	}
	return qp->data[c];
}

void CalculateFFTData()
{
	sub_sequence seq;
	seq.header = 0;
	seq.length = FFT_BAR_LENGTH;
	seq.step = FFT_SAMPLE_STEP;
	double temp;
	for(int i = 0;i<seq.length;i++)
	{
		temp = CMold(FFT(&seq,i))/2;
		if(temp>200) temp = 200.0;
		if(temp<0) temp = 0;
		FFT_Data[i] = (u16)temp;
	}
}

void DrawFFTBar(int pos_x,int pos_y,color c)
{
	if(pos_x + FFT_BAR_LENGTH > 1024 || pos_y + 200 > 600) return;
}
