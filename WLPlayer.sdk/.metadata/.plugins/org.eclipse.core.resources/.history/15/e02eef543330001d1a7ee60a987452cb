#include "fs.h"

static FATFS fatfs;

int init_fs()
{
	FRESULT status;
	TCHAR* path = "0:/";
	BYTE work[FF_MAX_SS];

	status = f_mount(&fatfs,path,1);
	//return 0;
	if (status != FR_OK) {
		printf("Volume is not FAT formated; formating FAT %d\r\n",status);
		status = f_mkfs(path, FM_FAT32, 0, work, sizeof work);
		if (status != FR_OK) {
			printf("Unable to format FATfs\r\n");
			return -1;
		}
		status = f_mount(&fatfs, path, 1);
		if (status != FR_OK) {
		printf("Unable to mount FATfs\r\n");
		return -1;
		}
	}
	return 0;
}

int sd_write_data(char* file_name, u32 src_addr,u32 byte_len)
{
	FIL file;
	UINT bw;

	f_open(&file,file_name,FA_CREATE_ALWAYS | FA_WRITE);
	f_lseek(&file,0);
	f_write(&file,(void*)src_addr,byte_len,&bw);
	f_close(&file);

	return (int)bw;
}

int sd_read_data(char* file_name,u32 src_addr,u32 byte_len)
{
	FIL file;
	UINT br;

	f_open(&file,file_name,FA_READ);
	f_lseek(&file,0);
	f_read(&file,(void*)src_addr,byte_len,&br);
	f_close(&file);

	return (int)br;
}

void read_wav(char* file_name,u32 addr,int len)
{
	FIL file;
	f_open(&file,file_name,FA_READ);
	u8 head[44] = {0};
	UINT count;
	f_read(&file,head,44,&count);
	printf("count:%d\n",count);
//	for(int i = 0;i<44;i++)
//	{
//		printf("%d ",head[i]);
//	}

	f_read(&file,(void*)addr,len,&count);

	f_close(&file);
	Xil_DCacheFlush();
	return;
}
