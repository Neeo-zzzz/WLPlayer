//#include "defs.h"
//#include "audio.h"
//#include "video.h"
//
//
//int main()
//{
//	//AudioInitialize();
//	//PlayMusic("land_s.wav");
//
//	VideoInitialize();
//	ColorBarTest();
//	while(1)
//	{
//		//main transaction loop
////		if(Music_Read_Permition)
////		{
////			Music_Read_Permition = 0;
////			ReadWavMusic(Music_Play_Now,1);
////		}
//	}
//}


#include "stdio.h"
#include "xparameters.h"
#include "xaxivdma.h"
#include "xaxivdma_i.h"
#include "xstatus.h"
#include "xil_cache.h"
#include "sleep.h"

int run_triple_frame_buffer(XAxiVdma* InstancePtr, int DeviceId, int hsize,
		int vsize, int buf_base_addr, int number_frame_count,
		int enable_frm_cnt_intr);


#define VDMA_DEV_ID XPAR_AXI_VDMA_0_DEVICE_ID
#define VIDEO_HEIGHT 600
#define VIDEO_WIDTH 1024
#define DDR_BASEADDR XPAR_PS7_DDR_0_S_AXI_BASEADDR
#define VIDEO_DDR_ADDR (DDR_BASEADDR + 0x1000000)


int main()
{
	int status, i, j;
	XAxiVdma instance;
	int video_ddr_addr = VIDEO_DDR_ADDR;
	u8* vdma_ptr = (u8*) video_ddr_addr;

	//init vdma
//	status = run_triple_frame_buffer(&instance,VDMA_DEV_ID,VIDEO_WIDTH,
//			VIDEO_HEIGHT,VIDEO_DDR_ADDR,0,0);

	////////////////////set and init vdma//////////////////////////

	XAxiVdma_Config *config;
	XAxiVdma_FrameCounter frame_cfg_p;

	config = XAxiVdma_LookupConfig(VDMA_DEV_ID);
	if (!config) {
		xil_printf("No video DMA found for ID %d\r\n",VDMA_DEV_ID );
	}
	status = XAxiVdma_CfgInitialize(&instance,config,config->BaseAddress);
	if(status != XST_SUCCESS)
	{
		printf("configuration initialization failed %d \n",status);
	}

	//set up the read channel
	XAxiVdma_DmaSetup read_cfg;
	read_cfg.VertSizeInput = VIDEO_HEIGHT;
	read_cfg.HoriSizeInput = VIDEO_WIDTH * (config->Mm2SStreamWidth>>3);
	read_cfg.Stride = VIDEO_WIDTH * (config->Mm2SStreamWidth>>3);
	read_cfg.FrameDelay = 0;
	read_cfg.EnableCircularBuf = 1;
	read_cfg.EnableSync = 1;
	read_cfg.PointNum = 0;
	read_cfg.EnableFrameCounter = 0;
	read_cfg.FixedFrameStoreAddr = 0;
	XAxiVdma_DmaConfig(&instance,XAXIVDMA_READ,&read_cfg);

	u32 addr = video_ddr_addr;
	for(int i = 0;i<instance.MaxNumFrames;i++)
	{
		read_cfg.FrameStoreStartAddr[i] = addr;
		addr += VIDEO_WIDTH * VIDEO_HEIGHT;
	}

	status = XAxiVdma_DmaSetBufferAddr(&instance,XAXIVDMA_READ,read_cfg.FrameStoreStartAddr);
	if(status != XST_SUCCESS)
	{
		printf("read channel set buffer address failed! error = %d \n",status);
	}

	//set up interrupt
	// close the intr
	XAxiVdma_IntrEnable(&instance,XAXIVDMA_IXR_ERROR_MASK,XAXIVDMA_WRITE);
	XAxiVdma_IntrEnable(&instance,XAXIVDMA_IXR_ERROR_MASK,XAXIVDMA_READ);

	//start the DMA engine
	status = XAxiVdma_DmaStart(&instance,XAXIVDMA_READ);
	if(status != XST_SUCCESS)
	{
		printf("start read transfer failed %d \n",status);
	}

	///////////////////end///////////////////////////////////////


	if(status != XST_SUCCESS)
	{
		printf("transfer of frames failed error = %d\n",status);
		return XST_FAILURE;
	}else
	{
		printf("transfer of frames started\n");
	}

	//write the ddr
	for(i = 0;i<VIDEO_HEIGHT;i++)
	{
		for(j = 0;j<VIDEO_WIDTH;j++)
		{
			if(i<VIDEO_HEIGHT/3)
			{
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0xff;
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0x00;
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0x00;
			}else if(i>VIDEO_HEIGHT*2/3)
			{
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0x00;
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0x00;
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0xff;
			}else
			{
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0x00;
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0xff;
				*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0x00;
			}

		}
	}

	Xil_DCacheFlush();
	//u8 r,g,b;
	while(1)
	{
		sleep(1);
		for(i = 0;i<VIDEO_HEIGHT;i++)
		{
			for(j = 0;j<VIDEO_WIDTH;j++)
			{
				if(i<VIDEO_HEIGHT/3)
				{
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0x00;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0xff;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0x00;
				}else if(i>VIDEO_HEIGHT*2/3)
				{
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0xff;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0x00;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0x00;
				}else
				{
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0x00;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0x00;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0xff;
				}

			}
		}
		Xil_DCacheFlush();
		sleep(1);
		for(i = 0;i<VIDEO_HEIGHT;i++)
		{
			for(j = 0;j<VIDEO_WIDTH;j++)
			{
				if(i<VIDEO_HEIGHT/3)
				{
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0x00;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0x00;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0xff;
				}else if(i>VIDEO_HEIGHT*2/3)
				{
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0x00;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0xff;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0x00;
				}else
				{
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0xff;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0x00;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0x00;
				}

			}
		}
		Xil_DCacheFlush();
		sleep(1);
		for(i = 0;i<VIDEO_HEIGHT;i++)
		{
			for(j = 0;j<VIDEO_WIDTH;j++)
			{
				if(i<VIDEO_HEIGHT/3)
				{
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0xff;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0x00;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0x00;
				}else if(i>VIDEO_HEIGHT*2/3)
				{
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0x00;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0x00;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0xff;
				}else
				{
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 0) = 0x00;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 1) = 0xff;
					*(vdma_ptr + i*VIDEO_WIDTH*3 + j*3 + 2) = 0x00;
				}

			}
		}
		Xil_DCacheFlush();

	}
	return 0;
}
